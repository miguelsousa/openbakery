# ============================================================================
[tool.black]
line-length = 88
target-version = ["py310"]
# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project. Separate regexes with | .
(
  .*_pb2.py  # exclude autogenerated Protocol Buffer files anywhere in the project
)
'''

# ============================================================================
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
addopts = "-n 8  --color=yes  --verbose"
filterwarnings = [
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    "ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning",
]

# ============================================================================
[tool.pylint.master]
ignore-patterns = ".*_pb2.py"
jobs = 0  # Specifying 0 will auto-detect the number of processors available to use
logging-format-style = "new"
msg-template = "{msg_id} ({symbol}) {path} @ {line} — {msg}"
output-format = "colorized"
score = "n"

[tool.pylint.'MESSAGES CONTROL']
disable = [
	# Error
	"no-member",
	"no-name-in-module",
	"used-before-assignment",

	# Warning
	"broad-exception-caught",
	"broad-exception-raised",
	"cell-var-from-loop",
	"fixme",
	"keyword-arg-before-vararg",
	"protected-access",
	"raise-missing-from",
	"redefined-outer-name",
	"subprocess-run-check",
	"undefined-loop-variable",
	"unnecessary-pass",
	"unused-argument",
	"unused-variable",

	# Convention
	"consider-iterating-dictionary",
	"consider-using-dict-items",
	"consider-using-enumerate",
	"consider-using-f-string",
	"import-outside-toplevel",
	"invalid-name",
	"missing-docstring",
	"too-many-lines",

	# Refactor
	"chained-comparison",
	"consider-using-with",
	"duplicate-code",
	"inconsistent-return-statements",
	"no-else-raise",
	"no-else-return",
	"too-few-public-methods",
	"too-many-arguments",
	"too-many-boolean-expressions",
	"too-many-branches",
	"too-many-instance-attributes",
	"too-many-locals",
	"too-many-nested-blocks",
        "too-many-positional-arguments",
	"too-many-public-methods",
	"too-many-return-statements",
	"too-many-statements",
	"unnecessary-dict-index-lookup",
	"use-a-generator",

	# Information
	"c-extension-no-member",
]

# ============================================================================
[tool.coverage.run]
# Measure 'branch' coverage in addition to 'statement' coverage
# See: http://coverage.readthedocs.org/en/latest/branch.html#branch
branch = true

parallel = true

# List of directories or packages to measure
source = ["openbakery"]

# These are treated as equivalent when combining data
[tool.coverage.paths]
source = ["Lib/openbakery"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

# Ignore source code that can’t be found, emitting a warning instead of an exception
ignore_errors = true
